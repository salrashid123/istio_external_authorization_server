apiVersion: v1
kind: Namespace
metadata:
  name: authz-ns
  labels:
    istio-injection: enabled
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authz
  namespace: authz-ns
spec:
  selector:
    matchLabels:
      app: authz
  replicas: 1
  template:
    metadata:
      labels:
        app: authz
    spec:
      serviceAccountName: authz-sa
      containers:
      - name: authz-container
        image: salrashid123/ext-authz-server
        volumeMounts:
        - name: keyfile
          mountPath: "/data/certs"
          readOnly: true        
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 50051
        env:
        - name: AUTHZ_ALLOWED_USERS
          valueFrom:
            configMapKeyRef:
              name: authz-config
              key: allowedusers                               
        - name: AUTHZ_SERVER_KEY_ID
          valueFrom:
            configMapKeyRef:
              name: authz-config
              key: authzserverkeyid
        - name: AUTHZ_ISSUER
          valueFrom:
            configMapKeyRef:
              name: authz-config
              key: authzissuer              
      volumes:
      - name: keyfile
        secret:
          secretName: svc-secret
---
apiVersion: v1
data:
  key.pem: $SVC_ACCOUNT_KEY
kind: Secret
metadata:
  name: svc-secret
  namespace: authz-ns
type: Opaque
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: authz-config
  namespace: authz-ns
data:
  allowedusers: "alice,bob,carol"
  authzserverkeyid: "$KEY_ID"
  authzissuer: "$SERVICE_ACCOUNT_EMAIL"
---
apiVersion: v1
kind: Service
metadata:
  name: authz
  namespace: authz-ns
  labels:
    app: authz
spec:
  ports:
  - port: 50051
    targetPort: 50051
    name: grpc
  selector:
    app: authz
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: authz-sa
  namespace: authz-ns
---
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: authz-virtualservice
  namespace: authz-ns
spec:
  hosts:
  - authz
  gateways:
  - mesh
  http:      
  - route:
    - destination:
        host: authz   
    match:
    - sourceLabels:           
        istio: ingressgateway
---
apiVersion: networking.istio.io/v1
kind: DestinationRule
metadata:
  name: authz-destination
  namespace: authz-ns
spec:
  host: "authz.authz-ns.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
---
##  ingress --> authz
apiVersion: security.istio.io/v1
kind: PeerAuthentication
metadata:
  name: ing-authzserver-peer-authn-policy
  namespace: authz-ns
spec:
  selector:
    matchLabels:
      app: authz
  mtls:
    mode: STRICT
---
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
 name: ing-authzserver-authz-policy
 namespace: authz-ns
spec:
 action: ALLOW
 selector:
   matchLabels:
     app: authz
 rules:
 - from:
   - source:
       principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
---
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: ext-authz
  namespace: istio-system
spec:
  selector:
    matchLabels:
      istio: ingressgateway
  action: CUSTOM
  provider:
    name: "my-ext-authz-grpc"
  rules:
  - to:
    - operation:
        paths: ["/*"]     
---  
## default deny all
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
 name: deny-all-authz-ns
 namespace: authz-ns
spec:
  {} 
---